laravel new ecommerace

composer require laravel/jetstream
php artisan jetstream:install livewire


models
php artisan make:model category -m 

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('categories', function (Blueprint $table) {
            // $table->id();
            // $table->timestamps();
            $table->increments('id');
            $table->string('name');
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->unsignedInteger('parent_id')->default(1)->nullable();
            $table->boolean('featured')->default(0);
            $table->boolean('menu')->default(1);
            $table->string('image')->nullable();
            $table->timestamps();
            $table->foreign('parent_id')->references('id')->on('categories')->onDelete('cascade');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('categories');
    }
};
id: The unique identifier of the category.
name: The name of the category.
slug: A unique slug that can be used in URLs to identify the category.
description: A text description of the category (optional).
parent_id: The ID of the parent category, if this category is a subcategory.
Note that we also set up a foreign key constraint on the parent_id column, so that if a parent category is deleted, all its child categories will also be deleted.

Next, let's create a migration to add a pivot table for the many-to-many relationship between categories and products:
model Categories
 namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Category extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'description',
        'parent_id',
    ];

    public function parent()
    {
        return $this->belongsTo(Category::class, 'parent_id');
    }

    public function children()
    {
        return $this->hasMany(Category::class, 'parent_id');
    }

    public function products()
    {
        return $this->hasMany(Product::class);
    }
}

In this example, we define the Category model with the following properties:

$fillable: An array of mass-assignable attributes, which includes name, description, and parent_id.
parent(): A belongsTo relationship with the same Category model to represent the parent category.
children(): A hasMany relationship with the same Category model to represent the child categories.
products(): A hasMany relationship with the Product model to represent the products in the category.
Now you can use the Category model to interact with the categories table in your database.









add product ->

descriptio 
name 
price
etc
           1 product have many  images ----create new table for images store âœ…

           2 product have many size  [size create by list ] and store in productsizetable 
           <option value="1">extra small</option> 
           <option value="2">small</option> 
           <option value="3">medium</option> 
           <option value="4">large</option> 
           <option value="5">extra large</option>

           3 attribute table 
            $table->integer('quantity');
            $table->decimal('price')->nullable();
            $table->string('color')->nullable();
            $table->unsignedBigInteger('size')->nullable();
            $table->string('status')->default('available')->nullable();
            $table->unsignedBigInteger('product_id');
            $table->foreign('product_id')->references('id')->on('products');
            $table->foreign('size')->references('id')->on('product_sizes');
            $table->foreign('color')->references('id')->on('product_colors');

           1 product have many colors 
            